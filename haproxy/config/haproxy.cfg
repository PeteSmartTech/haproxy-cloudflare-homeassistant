global

  log stdout local0 debug

  ssl-default-bind-options ssl-min-ver TLSv1.2
  ssl-default-bind-ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384


defaults

  log  global
  option  http-server-close

  retries 3

  timeout connect          5s
  timeout client          10s
  timeout server          10s
  timeout tunnel          3600s

  errorfile 400 /usr/local/etc/haproxy/errors/400.http
  errorfile 403 /usr/local/etc/haproxy/errors/403.http
  errorfile 408 /usr/local/etc/haproxy/errors/408.http
  errorfile 500 /usr/local/etc/haproxy/errors/500.http
  errorfile 502 /usr/local/etc/haproxy/errors/502.http
  errorfile 503 /usr/local/etc/haproxy/errors/503.http
  errorfile 504 /usr/local/etc/haproxy/errors/504.http

frontend f_http
  mode http
  bind *:80

  redirect scheme https code 301 if !{ ssl_fc }

  default_backend bk_no_match

# Frontend
frontend f_https
  mode http
  bind *:443 ssl crt /usr/local/etc/haproxy/certs/

  # Block badbots
  acl is-blockedagent hdr_sub(user-agent) -i -f /usr/local/etc/haproxy/sec/bad-user-agents.list.txt
  http-request deny if is-blockedagent

  # Security Policy and Headers
  http-response set-header Content-Security-Policy upgrade-insecure-requests
  http-response del-header ^Server:.*$
  http-response del-header ^X-Powered-By:.*$
  http-response add-header X-Frame-Options SAMEORIGIN
  http-response add-header Strict-Transport-Security max-age=31536000;
  http-response add-header X-XSS-Protection 1;mode=block
  http-response add-header X-Content-Type-Options nosniff
  http-response add-header Referrer-Policy same-origin

  log-format "ci=%ci cp=%cp [%tr] %ft %b/%s %TR/%Tw/%Tc/%Tr/%Ta %ST %B %CC %CS %tsc %ac/%fc/%bc/%sc/%rc %sq/%bq %hr %hs %{+Q}r"


  # ACL's to detect if requests are being made from your PUBLIC IP (if You VPN to your network and have an exit-node there)
  acl from_public_ip req.hdr(CF-Connecting-IP) -i <your-public-IP>
  http-request set-header X-From-Public-IP true if from_public_ip

  # ACL for our HomeAssistant, it is to let the HAProxy know which domain name to match to
  acl hst_homeassistant hdr(host) -i home.yourdomain.tld 

  # Backends for services
  use_backend bk_homeassistant if hst_homeassistant
  
  # self-explanatory, will return 403 if no previous ACL's match (in that case if client requests anything else other than HomeAssistant)
  default_backend bk_no_match 

# Backend
backend bk_homeassistant
  mode http
  option http-server-close # To enable WebSockets
  timeout tunnel 1h # To enable WebSockets

  server homeassistant <homeassistantIP>:8123 check verify none
  

  # Ensure we remove any existing X-Forwarded-For headers, required to avoid HomeAssistant's error 400:Bad Request
  http-request del-header X-Forwarded-For
  http-request del-header X-Forwarded-Proto
  
  # Then, let HAProxy add the correct X-Forwarded-For header for the original client IP
  option forwardfor except 127.0.0.1

	http-request add-header X-Forwarded-Proto https
	http-request add-header X-Forwarded-Port 443

  # feature, will allow traffic to HomeAssistant only if the source IP matches your Public IP
  http-request allow if { req.hdr(X-From-Public-IP) -m str true } 
  # in other case denies the requests
  http-request deny

backend bk_no_match
  mode http
  http-request deny deny_status 403
